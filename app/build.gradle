buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.ankitb.rxtesting"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
ext{
    retrofitVersion = '2.1.0'
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'io.reactivex:rxandroid:1.2.0'
    compile 'io.reactivex:rxjava:1.1.5'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
}

retrolambda {
    jdk '/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home'
    oldJdk '/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home'
    javaVersion JavaVersion.VERSION_1_7

}

/*
String getJavaHome(String version)
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "/usr/libexec/java_home", "-v", version
        standardOutput = stdout;
    }
    return stdout.toString().trim()
}

retrolambda {
    jdk System.getenv("JAVA8_HOME") ?: getJavaHome("1.8")
    oldJdk System.getenv("JAVA7_HOME") ?: getJavaHome("1.7")
    // ...
}*/
